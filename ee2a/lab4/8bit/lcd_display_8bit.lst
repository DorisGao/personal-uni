CCS PCM C Compiler, Version 3.239, 31482               08-Feb-07 14:52

               Filename: Y:\Year 2\EE2A\PIC-LCD\8bit\lcd_display_8bit.lst

               ROM used: 334 words (8%)
                         Largest free fragment is 2048
               RAM used: 56 (32%) at main() level
                         62 (35%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0C7
0003:  NOP
.................... /* 
....................  * Authors: Sam Black, Sam Burras, Ben Francis 
....................  * 
....................  * Version 1.0  Date: 07/02/07 
....................  * 
....................  * Program to send strings to the LCD using 
....................  * a 8-bit driver 
....................  * 
....................  */ 
....................  
.................... #include <16F648A.h> 
.................... //////// Standard Header file for the PIC16F648A device //////////////// 
.................... #device PIC16F648A 
.................... #list 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(int *)==1 
.................... #define ptrdiff_t int 
.................... #else 
.................... #define ptrdiff_t long 
.................... #endif 
....................  
.................... #define size_t int 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  (x==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  (x<' ') 
.................... #define isprint(x)  (x>=' ') 
.................... #define isgraph(x)  (x>' ') 
.................... #define ispunct(x)  ((x>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* compiler ignored the name 'strcpy()'; perhaps, it's reserved? 
....................    Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1*/ 
....................  
.................... char *strcopy(char *s1, char *s2) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; *s2 != 0; s++, s2++) { 
.................... 	  *s = *s2; 
....................   } 
....................   *s = *s2; 
....................   return(s1); 
.................... } 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   int n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,int c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, int c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... int *strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, int c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... int *strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
.................... 	 if (*sc2 == '\0') 
.................... 	    return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
.................... 	char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
.................... 	while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && *s == *t; ++s, ++t); 
....................  
.................... 		if (*t == '\0') 
.................... 			return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
.................... 	} 
.................... 	return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
00CC:  CLRF   20
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(int errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... int *strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
0014:  MOVLW  57
0015:  MOVWF  04
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   028
0019:  MOVLW  01
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  4A
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  NOP
0025:  NOP
0026:  DECFSZ 00,F
0027:  GOTO   019
0028:  RETLW  00
.................... #fuses NOWDT, INTRC_IO, NOPUT, NOPROTECT, NOLVP, NOMCLR 
.................... #include "LCD_8BIT.H" 
.................... /* LCD 8-bit driver 
....................  * 
....................  * Authors: Sam Black, Sam Burras, Ben Francis 
....................  * 
....................  * Derived from Custom Computer Services 
....................  * (C) Copyright 1996, 2003 LCD.C 
....................  * 
....................  * Version 1.0  Date: 07/02/07 
....................  * 
....................  */ 
....................  
.................... struct lcd_pin_map { 
....................    boolean rs; 
....................    boolean rw; 
....................    boolean enable; 
....................    boolean button; 
....................    int unused : 4; 
....................    int data : 8; 
.................... }; 
....................  
.................... /* Create structs to map I/O */ 
.................... struct lcd_pin_map lcd; 
.................... struct lcd_pin_map lcd_dir; 
....................  
.................... /* Set ports up correctly */ 
.................... #byte lcd=0x05 
.................... #byte lcd_dir=0x85 
....................  
.................... /* Send initialization sequence */ 
.................... /* No cursor */ 
.................... byte CONST lcd_init_nocursor[4] = {0x3C, 0x0C, 0x01, 0x06}; 
.................... /* Cursor */ 
.................... byte CONST lcd_init_cursor[4] = {0x3C, 0x0E, 0x01, 0x06}; 
....................  
.................... /* Set direction of pins to send chars to LCD */ 
.................... struct lcd_pin_map CONST lcd_write = {0, 0, 0, 1, 0, 0x00}; 
....................  
.................... /* Set direction of pins to read status from LCD */ 
.................... struct lcd_pin_map CONST lcd_read = {1, 0, 0, 1, 0, 0xFF}; 
....................  
.................... /* Based on lcd.c */ 
.................... void lcd_send_byte( byte address, byte n ) { 
....................  
.................... /* Set port direction */ 
....................       lcd_dir = lcd_write; 
0029:  BSF    03.5
002A:  CLRF   06
002B:  MOVLW  08
002C:  MOVWF  05
.................... /* Set what we are writing to */ 
.................... /* 0 is Instruction */ 
.................... /* 1 is Data */ 
....................       lcd.rs = address; 
002D:  BCF    03.5
002E:  BTFSS  57.0
002F:  BCF    05.0
0030:  BTFSC  57.0
0031:  BSF    05.0
.................... /* Write to LCD */ 
....................       lcd.rw = 0; 
0032:  BCF    05.1
....................       delay_us(1); 
0033:  NOP
....................       lcd.enable = 1; 
0034:  BSF    05.2
....................       delay_us(1); 
0035:  NOP
.................... /* Send data */ 
....................       lcd.data = n; 
0036:  MOVF   58,W
0037:  MOVWF  06
....................       delay_us(1); 
0038:  NOP
....................       lcd.enable = 0; 
0039:  BCF    05.2
....................       delay_us(1); 
003A:  NOP
.................... /* Reset RW/RS */ 
....................       lcd.rw = 1; 
003B:  BSF    05.1
....................       lcd.rs = 0; 
003C:  BCF    05.0
....................       delay_us(1); 
003D:  NOP
....................  
.................... } 
003E:  RETLW  00
....................  
.................... /* Based on lcd.c */ 
.................... boolean lcd_read_status() { 
....................  
....................       boolean status; 
.................... /* Set port direction */ 
....................       lcd_dir = lcd_read; 
.................... /* Read from the LCD */ 
....................       lcd.rw = 1; 
....................       delay_us(1); 
....................       lcd.enable = 1; 
....................       delay_us(1); 
....................       status = lcd.rs; 
....................       lcd.enable = 0; 
....................       delay_us(2); 
.................... /* Return the status */ 
....................       return(status); 
.................... } 
....................  
.................... /* Based on lcd.c */ 
.................... void lcd_init(int init) { 
....................  
....................     int i; 
....................  
....................     lcd_dir = lcd_write; 
003F:  BSF    03.5
0040:  CLRF   06
0041:  MOVLW  08
0042:  MOVWF  05
....................     lcd.rs = 0; 
0043:  BCF    03.5
0044:  BCF    05.0
....................     lcd.rw = 0; 
0045:  BCF    05.1
....................     lcd.enable = 0; 
0046:  BCF    05.2
....................     delay_ms(15); 
0047:  MOVLW  0F
0048:  MOVWF  57
0049:  CALL   014
....................  
....................     for(i=0; i<=3; i++) { 
004A:  CLRF   53
004B:  MOVF   53,W
004C:  SUBLW  03
004D:  BTFSS  03.0
004E:  GOTO   058
....................        lcd_send_byte(0, 0x30); 
004F:  CLRF   57
0050:  MOVLW  30
0051:  MOVWF  58
0052:  CALL   029
....................        delay_ms(5); 
0053:  MOVLW  05
0054:  MOVWF  57
0055:  CALL   014
....................     } 
0056:  INCF   53,F
0057:  GOTO   04B
....................  
.................... 	switch (init) { 
0058:  MOVF   52,W
0059:  XORLW  01
005A:  BTFSC  03.2
005B:  GOTO   060
005C:  XORLW  03
005D:  BTFSC  03.2
005E:  GOTO   06F
005F:  GOTO   07E
.................... 		case 1 :	for(i=0; i<=3; i++) 
0060:  CLRF   53
0061:  MOVF   53,W
0062:  SUBLW  03
0063:  BTFSS  03.0
0064:  GOTO   06E
....................        					lcd_send_byte(0, lcd_init_nocursor[i]);	break; 
0065:  MOVF   53,W
0066:  CALL   004
0067:  MOVWF  54
0068:  CLRF   57
0069:  MOVF   54,W
006A:  MOVWF  58
006B:  CALL   029
006C:  INCF   53,F
006D:  GOTO   061
006E:  GOTO   08D
....................        	case 2 :	for(i=0; i<=3; i++) 
006F:  CLRF   53
0070:  MOVF   53,W
0071:  SUBLW  03
0072:  BTFSS  03.0
0073:  GOTO   07D
....................        					lcd_send_byte(0, lcd_init_cursor[i]); break; 
0074:  MOVF   53,W
0075:  CALL   00C
0076:  MOVWF  54
0077:  CLRF   57
0078:  MOVF   54,W
0079:  MOVWF  58
007A:  CALL   029
007B:  INCF   53,F
007C:  GOTO   070
007D:  GOTO   08D
....................  
....................  
....................        	default :	for(i=0; i<=3; i++) 
007E:  CLRF   53
007F:  MOVF   53,W
0080:  SUBLW  03
0081:  BTFSS  03.0
0082:  GOTO   08C
....................        					lcd_send_byte(0, lcd_init_nocursor[i]); break; 
0083:  MOVF   53,W
0084:  CALL   004
0085:  MOVWF  54
0086:  CLRF   57
0087:  MOVF   54,W
0088:  MOVWF  58
0089:  CALL   029
008A:  INCF   53,F
008B:  GOTO   07F
008C:  GOTO   08D
.................... 	} 
.................... } 
008D:  BCF    0A.3
008E:  GOTO   124 (RETURN)
....................  
.................... /* Based on lcd.c */ 
.................... void lcd_putc( char c ) { 
....................    switch (c) { 
008F:  MOVF   56,W
0090:  XORLW  0C
0091:  BTFSC  03.2
0092:  GOTO   09A
0093:  XORLW  04
0094:  BTFSC  03.2
0095:  GOTO   0A2
0096:  XORLW  02
0097:  BTFSC  03.2
0098:  GOTO   0A7
0099:  GOTO   0AC
....................    /* clear the screen */ 
....................       case '\f'   : lcd_send_byte(0, 0x01); 
009A:  CLRF   57
009B:  MOVLW  01
009C:  MOVWF  58
009D:  CALL   029
....................                   delay_ms(2);                  break; 
009E:  MOVLW  02
009F:  MOVWF  57
00A0:  CALL   014
00A1:  GOTO   0B2
....................    /* back space */ 
....................       case '\b'   : lcd_send_byte(0, 0x08);     break; 
00A2:  CLRF   57
00A3:  MOVLW  08
00A4:  MOVWF  58
00A5:  CALL   029
00A6:  GOTO   0B2
....................    /* new line */ 
....................       case '\n'   : lcd_send_byte(0, 0xC0);     break; 
00A7:  CLRF   57
00A8:  MOVLW  C0
00A9:  MOVWF  58
00AA:  CALL   029
00AB:  GOTO   0B2
....................  
....................       default     : lcd_send_byte(1, c);        break; 
00AC:  MOVLW  01
00AD:  MOVWF  57
00AE:  MOVF   56,W
00AF:  MOVWF  58
00B0:  CALL   029
00B1:  GOTO   0B2
....................    } 
.................... } 
00B2:  RETLW  00
....................  
....................  
....................  
.................... char INITMESSAGE[16] = "How can I help?"; 
*
00CD:  MOVLW  48
00CE:  MOVWF  21
00CF:  MOVLW  6F
00D0:  MOVWF  22
00D1:  MOVLW  77
00D2:  MOVWF  23
00D3:  MOVLW  20
00D4:  MOVWF  24
00D5:  MOVLW  63
00D6:  MOVWF  25
00D7:  MOVLW  61
00D8:  MOVWF  26
00D9:  MOVLW  6E
00DA:  MOVWF  27
00DB:  MOVLW  20
00DC:  MOVWF  28
00DD:  MOVLW  49
00DE:  MOVWF  29
00DF:  MOVLW  20
00E0:  MOVWF  2A
00E1:  MOVLW  68
00E2:  MOVWF  2B
00E3:  MOVLW  65
00E4:  MOVWF  2C
00E5:  MOVLW  6C
00E6:  MOVWF  2D
00E7:  MOVLW  70
00E8:  MOVWF  2E
00E9:  MOVLW  3F
00EA:  MOVWF  2F
00EB:  CLRF   30
.................... char MESSAGE1[16] = "The answer?"; 
00EC:  MOVLW  54
00ED:  MOVWF  31
00EE:  MOVLW  68
00EF:  MOVWF  32
00F0:  MOVLW  65
00F1:  MOVWF  33
00F2:  MOVLW  20
00F3:  MOVWF  34
00F4:  MOVLW  61
00F5:  MOVWF  35
00F6:  MOVLW  6E
00F7:  MOVWF  36
00F8:  MOVLW  73
00F9:  MOVWF  37
00FA:  MOVLW  77
00FB:  MOVWF  38
00FC:  MOVLW  65
00FD:  MOVWF  39
00FE:  MOVLW  72
00FF:  MOVWF  3A
0100:  MOVLW  3F
0101:  MOVWF  3B
0102:  CLRF   3C
0103:  CLRF   3D
0104:  CLRF   3E
0105:  CLRF   3F
0106:  CLRF   40
.................... char MESSAGE2[16] = "Forty Two."; 
0107:  MOVLW  46
0108:  MOVWF  41
0109:  MOVLW  6F
010A:  MOVWF  42
010B:  MOVLW  72
010C:  MOVWF  43
010D:  MOVLW  74
010E:  MOVWF  44
010F:  MOVLW  79
0110:  MOVWF  45
0111:  MOVLW  20
0112:  MOVWF  46
0113:  MOVLW  54
0114:  MOVWF  47
0115:  MOVLW  77
0116:  MOVWF  48
0117:  MOVLW  6F
0118:  MOVWF  49
0119:  MOVLW  2E
011A:  MOVWF  4A
011B:  CLRF   4B
011C:  CLRF   4C
011D:  CLRF   4D
011E:  CLRF   4E
011F:  CLRF   4F
0120:  CLRF   50
....................  
.................... void send_string(int delay, char string[]) 
.................... { 
....................    int i; 
....................  
.................... /* send the string */ 
....................    for(i=0; string[i] != '\0'; i++) 
*
00B3:  CLRF   54
00B4:  MOVF   53,W
00B5:  ADDWF  54,W
00B6:  MOVWF  04
00B7:  MOVF   00,F
00B8:  BTFSC  03.2
00B9:  GOTO   0C6
....................    { 
....................       lcd_putc(string[i]); 
00BA:  MOVF   53,W
00BB:  ADDWF  54,W
00BC:  MOVWF  04
00BD:  MOVF   00,W
00BE:  MOVWF  55
00BF:  MOVWF  56
00C0:  CALL   08F
....................       delay_ms(delay); 
00C1:  MOVF   52,W
00C2:  MOVWF  57
00C3:  CALL   014
....................    } 
00C4:  INCF   54,F
00C5:  GOTO   0B4
.................... } 
00C6:  RETLW  00
....................  
.................... int main(void) 
00C7:  CLRF   04
00C8:  MOVLW  1F
00C9:  ANDWF  03,F
00CA:  MOVLW  07
00CB:  MOVWF  1F
.................... { 
....................    int i; 
....................  
.................... /* Init the Display */ 
....................    lcd_init(2); 
*
0121:  MOVLW  02
0122:  MOVWF  52
0123:  GOTO   03F
.................... /* Clear the screen */ 
....................    lcd_putc('\f'); 
0124:  MOVLW  0C
0125:  MOVWF  56
0126:  CALL   08F
.................... /* Send the message */ 
....................    send_string(5, INITMESSAGE); 
0127:  MOVLW  05
0128:  MOVWF  52
0129:  MOVLW  21
012A:  MOVWF  53
012B:  CALL   0B3
....................  
....................    while (1) 
....................    { 
....................    /* Display on the first line after button press */ 
....................       while(lcd.button == 1) 
....................       { } 
012C:  BTFSC  05.3
012D:  GOTO   12C
....................       lcd_putc('\f'); 
012E:  MOVLW  0C
012F:  MOVWF  56
0130:  CALL   08F
....................       send_string(1000, MESSAGE1); 
0131:  MOVLW  E8
0132:  MOVWF  52
0133:  MOVLW  31
0134:  MOVWF  53
0135:  CALL   0B3
....................  
....................       while(lcd.button == 1) 
....................       { } 
0136:  BTFSC  05.3
0137:  GOTO   136
....................       lcd_putc('\f'); 
0138:  MOVLW  0C
0139:  MOVWF  56
013A:  CALL   08F
....................    /* New line */ 
....................       lcd_putc('\n'); 
013B:  MOVLW  0A
013C:  MOVWF  56
013D:  CALL   08F
....................       send_string(5, MESSAGE2); 
013E:  MOVLW  05
013F:  MOVWF  52
0140:  MOVLW  41
0141:  MOVWF  53
0142:  CALL   0B3
....................    /* Add delay for button debouncing */ 
....................       delay_ms(500); 
0143:  MOVLW  02
0144:  MOVWF  52
0145:  MOVLW  FA
0146:  MOVWF  57
0147:  CALL   014
0148:  DECFSZ 52,F
0149:  GOTO   145
....................    } 
014A:  GOTO   12C
....................  
....................    return 0; 
014B:  MOVLW  00
014C:  MOVWF  78
.................... } 
014D:  SLEEP

Configuration Fuses:
   Word  1: 3F58   NOWDT NOPUT NOPROTECT BROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
